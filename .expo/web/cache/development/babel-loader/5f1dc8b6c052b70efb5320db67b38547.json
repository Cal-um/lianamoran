{"ast":null,"code":"import \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.array.is-array\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.object.create\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.date.to-string\";\nimport \"core-js/modules/es6.reflect.construct\";\nimport \"core-js/modules/es6.object.set-prototype-of\";\nimport \"core-js/modules/es6.object.define-property\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof (typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== (typeof Symbol === \"function\" ? Symbol.prototype : \"@@prototype\") ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && (typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\") in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from './react-native';\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"/Assets/\".concat(fontFile, \"#\").concat(fontFamily),\n    android: fontBasename,\n    web: fontBasename,\n    \"default\": fontFamily\n  });\n  var IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  var Icon = function (_PureComponent) {\n    _inherits(Icon, _PureComponent);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _defineProperty(_assertThisInitialized(_this), \"root\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"handleRef\", function (ref) {\n        _this.root = ref;\n      });\n\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            children = _this$props.children,\n            props = _objectWithoutProperties(_this$props, [\"name\", \"size\", \"color\", \"style\", \"children\"]);\n\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCharCode(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return React.createElement(Text, props, glyph, children);\n      }\n    }]);\n\n    return Icon;\n  }(PureComponent);\n\n  _defineProperty(Icon, \"propTypes\", {\n    allowFontScaling: PropTypes.bool,\n    name: IconNamePropType,\n    size: PropTypes.number,\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.node,\n    style: PropTypes.any\n  });\n\n  _defineProperty(Icon, \"defaultProps\", {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  });\n\n  var imageSourceCache = {};\n\n  function getImageSource(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    var processedColor = processColor(color);\n    var cacheKey = \"\".concat(glyph, \":\").concat(size, \":\").concat(processedColor);\n    var scale = PixelRatio.get();\n    return new Promise(function (resolve, reject) {\n      var cached = imageSourceCache[cacheKey];\n\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({\n            uri: cached,\n            scale: scale\n          });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {\n          var error = typeof err === 'string' ? new Error(err) : err;\n          imageSourceCache[cacheKey] = image || error || false;\n\n          if (!error && image) {\n            resolve({\n              uri: image,\n              scale: scale\n            });\n          } else {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n\n  function loadFont() {\n    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n\n      if (!file) {\n        return Promise.reject(new Error('Unable to load font, because no file was specified. '));\n      }\n\n      return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.')));\n    }\n\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(IconNamePropType, getImageSource);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(IconNamePropType, getImageSource);\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"sources":["/Users/calumharris/code/liana-moran/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"names":["NativeIconAPI","NativeModules","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","fontBasename","fontFile","fontReference","windows","android","web","fontFamily","IconNamePropType","PropTypes","Object","Icon","allowFontScaling","name","size","color","children","style","props","glyph","glyphMap","String","styleDefaults","fontSize","styleOverrides","fontWeight","fontStyle","imageSourceCache","ensureNativeModuleAvailable","processedColor","processColor","cacheKey","scale","PixelRatio","cached","reject","resolve","uri","error","image","file","Platform","Promise","createIconButtonComponent","createTabBarItemIOSComponent","createToolbarAndroidComponent"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}