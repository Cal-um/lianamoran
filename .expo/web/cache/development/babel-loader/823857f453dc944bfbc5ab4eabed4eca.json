{"ast":null,"code":"import createDOMProps from '../createDOMProps';\nimport findNodeHandle from '../../exports/findNodeHandle';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport UIManager from '../../exports/UIManager';\nvar NativeMethodsMixin = {\n  blur: function blur() {\n    UIManager.blur(findNodeHandle(this));\n  },\n  focus: function focus() {\n    UIManager.focus(findNodeHandle(this));\n  },\n  measure: function measure(callback) {\n    UIManager.measure(findNodeHandle(this), callback);\n  },\n  measureInWindow: function measureInWindow(callback) {\n    UIManager.measureInWindow(findNodeHandle(this), callback);\n  },\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\n  },\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = findNodeHandle(this);\n\n    if (node) {\n      var domProps = createDOMProps(null, nativeProps, function (style) {\n        return styleResolver.resolveWithNode(style, node);\n      });\n      UIManager.updateView(node, domProps, this);\n    }\n  }\n};\nexport default NativeMethodsMixin;","map":{"version":3,"sources":["/Users/calumharris/code/liana-moran/node_modules/react-native-web/dist/modules/NativeMethodsMixin/index.js"],"names":["NativeMethodsMixin","blur","UIManager","findNodeHandle","focus","measure","measureInWindow","measureLayout","setNativeProps","node","domProps","createDOMProps","styleResolver"],"mappings":"AASA,OAAA,cAAA,MAAA,mBAAA;AACA,OAAA,cAAA,MAAA,8BAAA;AACA,OAAA,aAAA,MAAA,wCAAA;AACA,OAAA,SAAA,MAAA,yBAAA;AACA,IAAIA,kBAAkB,GAAG;AAIvBC,EAAAA,IAAI,EAAE,SAAA,IAAA,GAAgB;AACpBC,IAAAA,SAAS,CAATA,IAAAA,CAAeC,cAAc,CAA7BD,IAA6B,CAA7BA;AALqB,GAAA;AAYvBE,EAAAA,KAAK,EAAE,SAAA,KAAA,GAAiB;AACtBF,IAAAA,SAAS,CAATA,KAAAA,CAAgBC,cAAc,CAA9BD,IAA8B,CAA9BA;AAbqB,GAAA;AAmBvBG,EAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,QAAA,EAA2B;AAClCH,IAAAA,SAAS,CAATA,OAAAA,CAAkBC,cAAc,CAAhCD,IAAgC,CAAhCA,EAAAA,QAAAA;AApBqB,GAAA;AAsCvBI,EAAAA,eAAe,EAAE,SAAA,eAAA,CAAA,QAAA,EAAmC;AAClDJ,IAAAA,SAAS,CAATA,eAAAA,CAA0BC,cAAc,CAAxCD,IAAwC,CAAxCA,EAAAA,QAAAA;AAvCqB,GAAA;AA6CvBK,EAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,oBAAA,EAAA,SAAA,EAAA,MAAA,EAAgE;AAC7EL,IAAAA,SAAS,CAATA,aAAAA,CAAwBC,cAAc,CAAtCD,IAAsC,CAAtCA,EAAAA,oBAAAA,EAAAA,MAAAA,EAAAA,SAAAA;AA9CqB,GAAA;AAuDvBM,EAAAA,cAAc,EAAE,SAAA,cAAA,CAAA,WAAA,EAAqC;AACnD,QAAI,CAAJ,WAAA,EAAkB;AAChB;AACD;;AAED,QAAIC,IAAI,GAAGN,cAAc,CAAzB,IAAyB,CAAzB;;AAEA,QAAA,IAAA,EAAU;AAGR,UAAIO,QAAQ,GAAGC,cAAc,CAAA,IAAA,EAAA,WAAA,EAAoB,UAAA,KAAA,EAAiB;AAChE,eAAOC,aAAa,CAAbA,eAAAA,CAAAA,KAAAA,EAAP,IAAOA,CAAP;AADF,OAA6B,CAA7B;AAGAV,MAAAA,SAAS,CAATA,UAAAA,CAAAA,IAAAA,EAAAA,QAAAA,EAAAA,IAAAA;AACD;AACF;AAtEsB,CAAzB;AAwEA,eAAA,kBAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport createDOMProps from '../createDOMProps';\nimport findNodeHandle from '../../exports/findNodeHandle';\nimport styleResolver from '../../exports/StyleSheet/styleResolver';\nimport UIManager from '../../exports/UIManager';\nvar NativeMethodsMixin = {\n  /**\n   * Removes focus from an input or view. This is the opposite of `focus()`.\n   */\n  blur: function blur() {\n    UIManager.blur(findNodeHandle(this));\n  },\n\n  /**\n   * Requests focus for the given input or view.\n   * The exact behavior triggered will depend the type of view.\n   */\n  focus: function focus() {\n    UIManager.focus(findNodeHandle(this));\n  },\n\n  /**\n   * Determines the position and dimensions of the view\n   */\n  measure: function measure(callback) {\n    UIManager.measure(findNodeHandle(this), callback);\n  },\n\n  /**\n   * Determines the location of the given view in the window and returns the\n   * values via an async callback. If the React root view is embedded in\n   * another native view, this will give you the absolute coordinates. If\n   * successful, the callback will be called be called with the following\n   * arguments:\n   *\n   *  - x\n   *  - y\n   *  - width\n   *  - height\n   *\n   * Note that these measurements are not available until after the rendering\n   * has been completed.\n   */\n  measureInWindow: function measureInWindow(callback) {\n    UIManager.measureInWindow(findNodeHandle(this), callback);\n  },\n\n  /**\n   * Measures the view relative to another view (usually an ancestor)\n   */\n  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, onFail, onSuccess);\n  },\n\n  /**\n   * This function sends props straight to the underlying DOM node.\n   * This works as if all styles were set as inline styles. Since a DOM node\n   * may aleady be styled with class names and inline styles, we need to get\n   * the initial styles from the DOM node and merge them with incoming props.\n   */\n  setNativeProps: function setNativeProps(nativeProps) {\n    if (!nativeProps) {\n      return;\n    }\n\n    var node = findNodeHandle(this);\n\n    if (node) {\n      // Next state is determined by comparison to existing state (in the DOM).\n      // Existing state has already gone through i18n transform\n      var domProps = createDOMProps(null, nativeProps, function (style) {\n        return styleResolver.resolveWithNode(style, node);\n      });\n      UIManager.updateView(node, domProps, this);\n    }\n  }\n};\nexport default NativeMethodsMixin;"]},"metadata":{},"sourceType":"module"}