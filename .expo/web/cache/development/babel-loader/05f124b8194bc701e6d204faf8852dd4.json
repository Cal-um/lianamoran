{"ast":null,"code":"import \"core-js/modules/es6.array.is-array\";\nvar accessibilityComponentTypeToRole = {\n  button: 'button',\n  none: 'presentation'\n};\nvar accessibilityTraitsToRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region'\n};\nvar accessibilityRoleToWebRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  imagebutton: null,\n  keyboardkey: null,\n  label: null,\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region',\n  text: null\n};\n\nvar propsToAriaRole = function propsToAriaRole(_ref) {\n  var accessibilityComponentType = _ref.accessibilityComponentType,\n      accessibilityRole = _ref.accessibilityRole,\n      accessibilityTraits = _ref.accessibilityTraits;\n\n  if (accessibilityRole) {\n    var inferredRole = accessibilityRoleToWebRole[accessibilityRole];\n\n    if (inferredRole !== null) {\n      return inferredRole || accessibilityRole;\n    }\n  }\n\n  if (accessibilityTraits) {\n    var trait = Array.isArray(accessibilityTraits) ? accessibilityTraits[0] : accessibilityTraits;\n    return accessibilityTraitsToRole[trait];\n  }\n\n  if (accessibilityComponentType) {\n    return accessibilityComponentTypeToRole[accessibilityComponentType];\n  }\n};\n\nexport default propsToAriaRole;","map":{"version":3,"sources":["/Users/calumharris/code/liana-moran/node_modules/react-native-web/dist/modules/AccessibilityUtil/propsToAriaRole.js"],"names":["accessibilityComponentTypeToRole","button","none","accessibilityTraitsToRole","adjustable","header","image","link","search","summary","accessibilityRoleToWebRole","imagebutton","keyboardkey","label","text","propsToAriaRole","accessibilityComponentType","_ref","accessibilityRole","accessibilityTraits","inferredRole","trait","Array"],"mappings":";AAQA,IAAIA,gCAAgC,GAAG;AACrCC,EAAAA,MAAM,EAD+B,QAAA;AAErCC,EAAAA,IAAI,EAAE;AAF+B,CAAvC;AAIA,IAAIC,yBAAyB,GAAG;AAC9BC,EAAAA,UAAU,EADoB,QAAA;AAE9BH,EAAAA,MAAM,EAFwB,QAAA;AAG9BI,EAAAA,MAAM,EAHwB,SAAA;AAI9BC,EAAAA,KAAK,EAJyB,KAAA;AAK9BC,EAAAA,IAAI,EAL0B,MAAA;AAM9BL,EAAAA,IAAI,EAN0B,cAAA;AAO9BM,EAAAA,MAAM,EAPwB,QAAA;AAQ9BC,EAAAA,OAAO,EAAE;AARqB,CAAhC;AAUA,IAAIC,0BAA0B,GAAG;AAC/BN,EAAAA,UAAU,EADqB,QAAA;AAE/BH,EAAAA,MAAM,EAFyB,QAAA;AAG/BI,EAAAA,MAAM,EAHyB,SAAA;AAI/BC,EAAAA,KAAK,EAJ0B,KAAA;AAK/BK,EAAAA,WAAW,EALoB,IAAA;AAM/BC,EAAAA,WAAW,EANoB,IAAA;AAO/BC,EAAAA,KAAK,EAP0B,IAAA;AAQ/BN,EAAAA,IAAI,EAR2B,MAAA;AAS/BL,EAAAA,IAAI,EAT2B,cAAA;AAU/BM,EAAAA,MAAM,EAVyB,QAAA;AAW/BC,EAAAA,OAAO,EAXwB,QAAA;AAY/BK,EAAAA,IAAI,EAAE;AAZyB,CAAjC;;AAoBA,IAAIC,eAAe,GAAG,SAAA,eAAA,CAAA,IAAA,EAA+B;AACnD,MAAIC,0BAA0B,GAAGC,IAAI,CAArC,0BAAA;AAAA,MACIC,iBAAiB,GAAGD,IAAI,CAD5B,iBAAA;AAAA,MAEIE,mBAAmB,GAAGF,IAAI,CAF9B,mBAAA;;AAIA,MAAA,iBAAA,EAAuB;AACrB,QAAIG,YAAY,GAAGV,0BAA0B,CAA7C,iBAA6C,CAA7C;;AAEA,QAAIU,YAAY,KAAhB,IAAA,EAA2B;AAEzB,aAAOA,YAAY,IAAnB,iBAAA;AACD;AACF;;AAED,MAAA,mBAAA,EAAyB;AACvB,QAAIC,KAAK,GAAGC,KAAK,CAALA,OAAAA,CAAAA,mBAAAA,IAAqCH,mBAAmB,CAAxDG,CAAwD,CAAxDA,GAAZ,mBAAA;AACA,WAAOnB,yBAAyB,CAAhC,KAAgC,CAAhC;AACD;;AAED,MAAA,0BAAA,EAAgC;AAC9B,WAAOH,gCAAgC,CAAvC,0BAAuC,CAAvC;AACD;AArBH,CAAA;;AAwBA,eAAA,eAAA","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar accessibilityComponentTypeToRole = {\n  button: 'button',\n  none: 'presentation'\n};\nvar accessibilityTraitsToRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region'\n};\nvar accessibilityRoleToWebRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  imagebutton: null,\n  keyboardkey: null,\n  label: null,\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region',\n  text: null\n};\n/**\n * Provides compatibility with React Native's \"accessibilityTraits\" (iOS) and\n * \"accessibilityComponentType\" (Android), converting them to equivalent ARIA\n * roles.\n */\n\nvar propsToAriaRole = function propsToAriaRole(_ref) {\n  var accessibilityComponentType = _ref.accessibilityComponentType,\n      accessibilityRole = _ref.accessibilityRole,\n      accessibilityTraits = _ref.accessibilityTraits;\n\n  if (accessibilityRole) {\n    var inferredRole = accessibilityRoleToWebRole[accessibilityRole];\n\n    if (inferredRole !== null) {\n      // ignore roles that don't map to web\n      return inferredRole || accessibilityRole;\n    }\n  }\n\n  if (accessibilityTraits) {\n    var trait = Array.isArray(accessibilityTraits) ? accessibilityTraits[0] : accessibilityTraits;\n    return accessibilityTraitsToRole[trait];\n  }\n\n  if (accessibilityComponentType) {\n    return accessibilityComponentTypeToRole[accessibilityComponentType];\n  }\n};\n\nexport default propsToAriaRole;"]},"metadata":{},"sourceType":"module"}