{"ast":null,"code":"import \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.function.name\";\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar warnValidStyle = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  var getComponentName = function getComponentName(instanceOrFiber) {\n    if (typeof instanceOrFiber.getName === 'function') {\n      var instance = instanceOrFiber;\n      return instance.getName();\n    }\n\n    if (typeof instanceOrFiber.tag === 'number') {\n      var fiber = instanceOrFiber;\n      var type = fiber.type;\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      if (typeof type === 'function') {\n        return type.displayName || type.name;\n      }\n    }\n\n    return null;\n  };\n\n  var camelizeStyleName = require('fbjs/lib/camelizeStyleName');\n\n  var warning = require('fbjs/lib/warning');\n\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n  var warnedForNaNValue = false;\n  var warnedForInfinityValue = false;\n\n  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner));\n  };\n\n  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner));\n  };\n\n  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    warning(false, \"Style property values shouldn't contain a semicolon.%s \" + 'Try \"%s: %s\" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, ''));\n  };\n\n  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n    warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));\n  };\n\n  var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value, owner) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n    warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));\n  };\n\n  var checkRenderMessage = function checkRenderMessage(owner) {\n    var ownerName;\n\n    if (owner != null) {\n      ownerName = getComponentName(owner);\n    } else {}\n\n    if (ownerName) {\n      return '\\n\\nCheck the render method of `' + ownerName + '`.';\n    }\n\n    return '';\n  };\n\n  warnValidStyle = function warnValidStyle(name, value, component) {\n    var owner;\n\n    if (component) {}\n\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name, owner);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name, owner);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value, owner);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value, owner);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value, owner);\n      }\n    }\n  };\n}\n\nexport default warnValidStyle;","map":{"version":3,"sources":["/Users/calumharris/code/liana-moran/node_modules/react-native-web/dist/vendor/react-dom/warnValidStyle/index.js"],"names":["emptyFunction","require","warnValidStyle","process","getComponentName","instanceOrFiber","instance","fiber","type","camelizeStyleName","warning","badVendoredStyleNamePattern","badStyleValueWithSemicolonPattern","warnedStyleNames","warnedStyleValues","warnedForNaNValue","warnedForInfinityValue","warnHyphenatedStyleName","checkRenderMessage","warnBadVendoredStyleName","name","warnStyleValueWithSemicolon","value","warnStyleValueIsNaN","warnStyleValueIsInfinity","owner","ownerName","isNaN","isFinite"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * From React 16.0.0\n * \n */\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar warnValidStyle = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  var getComponentName = function getComponentName(instanceOrFiber) {\n    if (typeof instanceOrFiber.getName === 'function') {\n      // Stack reconciler\n      var instance = instanceOrFiber;\n      return instance.getName();\n    }\n\n    if (typeof instanceOrFiber.tag === 'number') {\n      // Fiber reconciler\n      var fiber = instanceOrFiber;\n      var type = fiber.type;\n\n      if (typeof type === 'string') {\n        return type;\n      }\n\n      if (typeof type === 'function') {\n        return type.displayName || type.name;\n      }\n    }\n\n    return null;\n  }; // 'msTransform' is correct, but the other prefixes should be capitalized\n\n\n  var camelizeStyleName = require('fbjs/lib/camelizeStyleName');\n\n  var warning = require('fbjs/lib/warning');\n\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/; // style values shouldn't contain a semicolon\n\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n  var warnedForNaNValue = false;\n  var warnedForInfinityValue = false;\n\n  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner));\n  };\n\n  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner));\n  };\n\n  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    warning(false, \"Style property values shouldn't contain a semicolon.%s \" + 'Try \"%s: %s\" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, ''));\n  };\n\n  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n    warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));\n  };\n\n  var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value, owner) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n    warning(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner));\n  };\n\n  var checkRenderMessage = function checkRenderMessage(owner) {\n    var ownerName;\n\n    if (owner != null) {\n      // Stack passes the owner manually all the way to CSSPropertyOperations.\n      ownerName = getComponentName(owner);\n    } else {// Fiber doesn't pass it but uses ReactDebugCurrentFiber to track it.\n      // It is only enabled in development and tracks host components too.\n      // var {getCurrentFiberOwnerName} = require('ReactDebugCurrentFiber');\n      //  ownerName = getCurrentFiberOwnerName();\n      // TODO: also report the stack.\n    }\n\n    if (ownerName) {\n      return '\\n\\nCheck the render method of `' + ownerName + '`.';\n    }\n\n    return '';\n  };\n\n  warnValidStyle = function warnValidStyle(name, value, component) {\n    var owner;\n\n    if (component) {// TODO: this only works with Stack. Seems like we need to add unit tests?\n      // owner = component._currentElement._owner;\n    }\n\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name, owner);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name, owner);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value, owner);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value, owner);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value, owner);\n      }\n    }\n  };\n}\n\nexport default warnValidStyle;"]},"metadata":{},"sourceType":"module"}