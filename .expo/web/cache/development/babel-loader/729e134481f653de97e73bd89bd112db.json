{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport HeaderFooter from \"./HeaderFooter\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport useDimentions from '../utils/useDimentions';\nimport { TransitionState } from \"gatsby-plugin-transition-link\";\n\nvar Layout = function Layout(_ref) {\n  var children = _ref.children,\n      location = _ref.location;\n  var dimensions = useDimentions();\n  var opacity = useRef(new Animated.Value(0)).current;\n\n  var _useState = useState(\"entered\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mount = _useState2[0],\n      setMount = _useState2[1];\n\n  useEffect(function () {\n    if (mount === \"entered\" || mount === \"entering\") {\n      animateIn();\n    } else {\n      animateOut();\n    }\n  }, [mount]);\n\n  var animateIn = function animateIn() {\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n  };\n\n  var animateOut = function animateOut() {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 200,\n      useNativeDriver: false\n    }).start();\n  };\n\n  return React.createElement(TransitionState, null, function (transition) {\n    setMount(transition.transitionStatus);\n    return React.createElement(Animated.View, {\n      style: {\n        opacity: opacity,\n        minHeight: dimensions.height,\n        minWidth: dimensions.width\n      }\n    }, React.createElement(HeaderFooter, {\n      compact: location.pathname === \"/\"\n    }, children));\n  });\n};\n\nexport default Layout;","map":{"version":3,"sources":["/Users/calumharris/code/liana-moran/src/layouts/index.tsx"],"names":["React","useRef","useEffect","useState","HeaderFooter","useDimentions","TransitionState","Layout","children","location","dimensions","opacity","Animated","Value","current","mount","setMount","animateIn","animateOut","timing","toValue","duration","useNativeDriver","start","transition","transitionStatus","minHeight","height","minWidth","width","pathname"],"mappings":";AAAA,OAAOA,KAAP,IAAoBC,MAApB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAGA,OAAOC,aAAP,MAA0B,wBAA1B;AACA,SAASC,eAAT,QAAgC,+BAAhC;;AACA,IAAMC,MAAqB,GAAG,SAAxBA,MAAwB,OAA4B;AAAA,MAAzBC,QAAyB,QAAzBA,QAAyB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAExD,MAAMC,UAAU,GAAGL,aAAa,EAAhC;AACA,MAAMM,OAAO,GAAGV,MAAM,CAAC,IAAIW,QAAQ,CAACC,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BC,OAA9C;;AAHwD,kBAI9BX,QAAQ,CAAC,SAAD,CAJsB;AAAA;AAAA,MAIjDY,KAJiD;AAAA,MAI1CC,QAJ0C;;AAOxDd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIa,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,UAArC,EAAiD;AAC/CE,MAAAA,SAAS;AACV,KAFD,MAEO;AACLC,MAAAA,UAAU;AACX;AAEF,GAPQ,EAON,CAACH,KAAD,CAPM,CAAT;;AASA,MAAME,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBL,IAAAA,QAAQ,CAACO,MAAT,CAAgBR,OAAhB,EAAyB;AACvBS,MAAAA,OAAO,EAAE,CADc;AAEvBC,MAAAA,QAAQ,EAAE,GAFa;AAGvBC,MAAAA,eAAe,EAAE;AAHM,KAAzB,EAIGC,KAJH;AAKD,GAND;;AAQA,MAAML,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBN,IAAAA,QAAQ,CAACO,MAAT,CAAgBR,OAAhB,EAAyB;AACvBS,MAAAA,OAAO,EAAE,CADc;AAEvBC,MAAAA,QAAQ,EAAE,GAFa;AAGvBC,MAAAA,eAAe,EAAE;AAHM,KAAzB,EAIGC,KAJH;AAKD,GAND;;AAQA,SACE,oBAAC,eAAD,QACG,UAACC,UAAD,EAAqB;AACpBR,IAAAA,QAAQ,CAACQ,UAAU,CAACC,gBAAZ,CAAR;AACA,WACE,oBAAC,QAAD,CAAU,IAAV;AAAe,MAAA,KAAK,EAAE;AAAEd,QAAAA,OAAO,EAAPA,OAAF;AAAWe,QAAAA,SAAS,EAAEhB,UAAU,CAACiB,MAAjC;AAAyCC,QAAAA,QAAQ,EAAElB,UAAU,CAACmB;AAA9D;AAAtB,OACE,oBAAC,YAAD;AAAc,MAAA,OAAO,EAAEpB,QAAQ,CAACqB,QAAT,KAAsB;AAA7C,OACGtB,QADH,CADF,CADF;AAMD,GATH,CADF;AAaD,CA7CD;;AA+CA,eAAeD,MAAf","sourcesContent":["import React, { FC, useRef, useEffect, useState } from 'react'\nimport HeaderFooter from \"./HeaderFooter\"\nimport { PageProps } from 'gatsby'\nimport { View, Animated } from 'react-native'\nimport useDimentions from '../utils/useDimentions'\nimport { TransitionState } from \"gatsby-plugin-transition-link\"\nconst Layout: FC<PageProps> = ({ children, location }) => {\n\n  const dimensions = useDimentions()\n  const opacity = useRef(new Animated.Value(0)).current\n  const [mount, setMount] = useState(\"entered\")\n\n\n  useEffect(() => {\n    if (mount === \"entered\" || mount === \"entering\") {\n      animateIn()\n    } else {\n      animateOut()\n    }\n\n  }, [mount])\n\n  const animateIn = () => {\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: 200,\n      useNativeDriver: false\n    }).start()\n  }\n\n  const animateOut = () => {\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: 200,\n      useNativeDriver: false\n    }).start()\n  }\n\n  return (\n    <TransitionState>\n      {(transition: any) => {\n        setMount(transition.transitionStatus)\n        return (\n          <Animated.View style={{ opacity, minHeight: dimensions.height, minWidth: dimensions.width }}>\n            <HeaderFooter compact={location.pathname === \"/\"}>\n              {children}\n            </HeaderFooter>\n          </Animated.View>)\n      }}\n    </TransitionState>\n  )\n}\n\nexport default Layout\n"]},"metadata":{},"sourceType":"module"}